version: '3.8'

networks:
  microservices-networks:
    driver: overlay
    attachable: true
services:
  mariadb:
    image: mariadb:latest
    deploy:
#      replicas: 1
      placement:
        constraints:
          - node.hostname == vps2  # Hoặc node có nhiều storage nhất
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=product_service
    ports:
      - "3306:3306"
    volumes:
      - mariadb_data:/var/lib/mysql
    networks:
      - microservices-networks

  # Core services - đặt trên VPS1
  config-server:
    image: "${DOCKERHUB_USERNAME}/config-server:latest"
    deploy:
#      replicas: 1
      placement:
        constraints:
          - node.hostname == vps2
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - microservices-networks
    env_file:
      - local.env

  service-registry:
    image: "${DOCKERHUB_USERNAME}/service-registry:latest"
    deploy:
#      replicas: 1
      placement:
        constraints:
          - node.hostname == vps2
    ports:
      - "8761:8761"
    networks:
      - microservices-networks
    env_file:
      - local.env

  gateway-service:
    image: "${DOCKERHUB_USERNAME}/gateway-service:latest"
    deploy:
#      replicas: 1
      placement:
        constraints:
          - node.hostname == vps2
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - microservices-networks
    env_file:
      - local.env

  # Business services - phân bổ trên VPS2
  auth-service:
    image: "${DOCKERHUB_USERNAME}/auth-service:latest"
    deploy:
#      replicas: 1
      placement:
        constraints:
          - node.hostname == vps2
    ports:
      - "9996:9996"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - microservices-networks
    env_file:
      - local.env

  product-service:
    image: "${DOCKERHUB_USERNAME}/product-service:latest"
    deploy:
#      replicas: 1
      placement:
        constraints:
          - node.hostname == vps1
    ports:
      - "9898:9898"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8888
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka/
      - DATABASE_URL=jdbc:mariadb://mariadb:3306/product_service
    networks:
      - microservices-networks
    env_file:
      - local.env

  user-service:
    image: "${DOCKERHUB_USERNAME}/user-service:latest"
    deploy:
#      replicas: 1
      placement:
        constraints:
          - node.hostname == vps2
    ports:
      - "9995:9995"
    networks:
      - microservices-networks
    env_file:
      - local.env

  # Support services - phân bổ trên VPS3
  cart-service:
    image: "${DOCKERHUB_USERNAME}/cart-service:latest"
    deploy:
#      replicas: 1
      placement:
        constraints:
          - node.hostname == vps1
    ports:
      - "8088:8088"
    networks:
      - microservices-networks
    env_file:
      - local.env

  order-service:
    image: "${DOCKERHUB_USERNAME}/order-service:latest"
    deploy:
#      replicas: 1
      placement:
        constraints:
          - node.hostname == vps1
    ports:
      - "9292:9292"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=broker:9092
    networks:
      - microservices-networks
    env_file:
      - local.env

  payment-service:
    image: "${DOCKERHUB_USERNAME}/payment-service:latest"
    deploy:
#      replicas: 1
      placement:
        constraints:
          - node.hostname == vps1
    ports:
      - "9997:9997"
    environment:
      - TZ=Asia/Ho_Chi_Minh
    networks:
      - microservices-networks
    env_file:
      - local.env

  notification-service:
    image: "${DOCKERHUB_USERNAME}/notification-service:latest"
    deploy:
#      replicas: 1
      placement:
        constraints:
          - node.hostname == vps1
    ports:
      - "9003:9003"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=broker:9092
    networks:
      - microservices-networks
    env_file:
      - local.env

  chat-box:
    image: "${DOCKERHUB_USERNAME}/chat-box:latest"
    deploy:
#      replicas: 1
      placement:
        constraints:
          - node.hostname == vps2
    ports:
      - "8345:8345"
    networks:
      - microservices-networks
    env_file:
      - local.env
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.0
    hostname: zookeeper
    container_name: zookeeper
    deploy:
      #      replicas: 1
      placement:
        constraints:
          - node.hostname == vps1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - microservices-networks
  broker:
      image: confluentinc/cp-server:7.7.0
      hostname: broker
      container_name: broker
      deploy:
        #      replicas: 1
        placement:
          constraints:
            - node.hostname == vps1
      depends_on:
        - zookeeper
      ports:
        - "9092:9092"
        - "9101:9101"
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://broker:9092
        KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
        KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        KAFKA_JMX_PORT: 9101
        KAFKA_JMX_HOSTNAME: localhost
        CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
        CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
        CONFLUENT_METRICS_ENABLE: 'true'
        CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      networks:
        - microservices-networks

  control-center:
      image: confluentinc/cp-enterprise-control-center:7.7.0
      hostname: control-center
      container_name: control-center
      deploy:
        #      replicas: 1
        placement:
          constraints:
            - node.hostname == vps1
      depends_on:
        - broker
      ports:
        - "9021:9021"
      environment:
        CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
        CONTROL_CENTER_REPLICATION_FACTOR: 1
        CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
        CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
        CONFLUENT_METRICS_TOPIC_REPLICATION: 1
        PORT: 9021
      networks:
        - microservices-networks
  redis:
    image: redis:latest
    deploy:
      #      replicas: 1
      placement:
        constraints:
          - node.hostname == vps2  # Đặt cùng node với database
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices-networks
    command: redis-server --appendonly yes

volumes:
  mariadb_data: